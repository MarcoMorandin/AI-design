complex filters in Python audio signal processing by leveraging the computational efficiencies of GPU acceleration. Built on the robust PyTorch framework, TorchFX provides an object-oriented interface that simplifies the manipulation of audio signals. A key innovation of this library is the introduction of the pipe operator, achieved through the operator overloading of the OR operator, which allows users to intuitively chain multiple filters. This feature facilitates the seamless creation of complex filter chains, making the process both intuitive and straightforward. The library offers a comprehensive suite of FIR and IR filters, with particular attention to the processing needs of multichannel audio files.

Despite the advancements and capabilities presented by TorchFX, it is important to acknowledge certain limitations that currently exist. One significant limitation is the compatibility with the available GPUs on the market. At present, TorchFX primarily supports CUDA, the programming language developed by NVIDIA for its hardware, which means that the library is compatible with NVIDIA GPUs. However, it does not currently support AMD or Intel GPUs. This limitation is a consequence of TorchFX being built on PyTorch, which is actively working to extend its support to these platforms. We are optimistic that TorchFX will become compatible with AMD and Intel GPUs in the future. Additionally, while there are ongoing projects exploring the use of Vulkan for GPU acceleration, these efforts are still in development and have not yet reached a stable state. Nevertheless, TorchFX remains compatible with CPUs, allowing it to be used on machines that do not have GPU capabilities.

Looking ahead, TorchFX is still under active development, and our roadmap includes several exciting enhancements. We plan to expand the library's interface by introducing additional filters and incorporating common DSP functionalities such as Fast Fourier Transform (FFT) and Short-Time Fourier Transform (STFT). These additions will further enhance the library's versatility and utility in various audio processing applications. Moreover, we are committed to enabling compatibility with real-time audio streams, which will open up new possibilities for live audio processing applications. This capability will be particularly valuable in fields such as music production, broadcasting, and interactive audio experiences.

In conclusion, TorchFX is a new tool for audio signal processing that integrates DSP techniques within an AI-development framework, aiming to simplify the implementation of advanced audio processing methods. As the library continues to evolve, it aspires to become a valuable resource for researchers and developers in the audio processing domain, contributing to advancements in GPU-accelerated audio processing.

## References

* [1] Pauli Virtanen, Ralf Gommers, Travis E. Oliphant, Matt Haberland, Tyler Reddy, David Cournapeau, Evgeni Burovski, Pearan Peterson, Warren Weckeser, Jonathan Bright, Stefan J. van der Walt, Matthew Brett, Joshua Wilson, K. Jarrod Millman, Nikolay Mayorov, Andrew R. J. Nelson, Eric Jones, Robert Kern, Eric Larson, C J Carey, Ilhan Polat, Yu Feng, Eric W. Moore, Jake VanderPlas, Denis Laxalde, Josef Perktold, Robert Cimrman, Ian Henriksen, E. A. Quintero, Charles R. Harris, Anne M. Archibald, Antonio H. Ribeiro, Fabian Pedregosa, Paul van Mulbregt, and SciPy 1.0 Contributors, "SciPy 1.0: Fundamental Algorithms for Scientific Computing in Python," _Nature Methods_, vol. 17, pp. 261-272, 2020.
* [2] Charles R. Harris, K. Jarrod Millman, Stefan J. van der Walt, Ralf Gommers, Pauli Virtanen, David Cournapeau, Eric Wieser, Julian Taylor, Sebastian Berg, Nathaniel J.

\begin{table}
\begin{tabular}{|c|c|} \hline Implementation & Time (s) \\ \hline scipy & \(2.0173\) \\ nn.Module subclass & \(1.5743\) \\ nn.Sequential & \(1.5487\) \\ pipe operator & \(1.5626\) \\ \hline \end{tabular}
\end{table}
Table 4: Execution time as a function of the interface.

Figure 2: Comparison of the average execution time as a function of the number of channels for IIR and FIR filters.

