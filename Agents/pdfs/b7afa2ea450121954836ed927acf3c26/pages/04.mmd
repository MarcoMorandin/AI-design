```
0:\(\{z_{1},z_{2}\cdots,z_{I}\}\), \(\mathbf{g}\), and \(J\).
0:\(\{C_{1}\cdots C_{J}\}\), \(\{z_{1},z_{2},\cdots z_{J}\}\), and \(X_{i,j}\).
1:Initialize set cluster number \(\{C_{1}\cdots C_{J}\}\), the maximum iterations \(N\), and maximum UAV load \(D_{j}\).
2:Select \(J\) random samples from \(\{z_{1},z_{2}\cdots,z_{I}\}\) as the initial centroid \((\mu_{1}\cdots\mu_{J})\).
3:for\(i=1\) to \(N\)do
4:for\(j=1\) to \(J\)do
5: Calculate the initial distance \(d_{i}^{*}\).
6: Allocate \(z_{i}\) to \(C_{j}\) with minimum \(d_{i}^{j}\).
7: Update \(\mu\) according to \(\mu_{1}\).
8:endfor
9:if\(\mu_{j(n)}=\mu_{j(n-1)}\)then
10: End loop.
11:endif
12:endfor
13:while\(\sum_{i\in C_{j}}g_{i}>D_{j}\)do
14: Removal \(z_{i}\) with \(max(d_{i}^{j})\) from \(C_{j}\).
15: Add \(z_{i}\) to \(C_{i}\neq C_{j}\) with minimum \(d_{i}^{j}\).
16:endwhile
```

**Algorithm 1** ULAR Mechanism

## IV Algorithm Design

In this section, we design a low computing cost mechanism ULAR to find the best location of UAV-MEC, and adjust the unloading destination of UEs according to the maximum data capacity of UAV-MEC. Then, in order to achieve the Nash equilibrium efficiently, we propose the CPPO algorithm.

### _UAV Localization and Availability Response Mechanism_

In order to deploy UAVs and allocate computing resources of UAVs more efficiently, we design the ULAR mechanism, as shown in algorithm 1. We adopt the K-means clustering based to select the optimal deployment positions of UAVs. From steps 1 to 12, the UEs are clustered according to the distance and the updated clusters are obtained. Further, when the amount of offloading data exceeds the maximum load of UAV \(j\), the farthest UE in the cluster assigned to the next nearest cluster from steps 13 to 16. In general, with the Algorithm 1, more UEs can be served in the limited resources of UAVs.

### _Chess-like PSOPSSL Optimization Algorithm_

We propose the CPPO to obtain the Nash equilibrium in Algorithm 2. The particle swarm optimization probability based strategy selection learning optimization (PSOPSSL) method is used to optimize the pricing strategy and offloading strategy to find the optimal solution (lines 2-5). We use the ULAR mechanism to simulate a scenario similar to the two-player game in chess, with the obtained solution to avoid the situation that the UAV is not available after optimization (lines 7-10). The utility of both sides is calculated to reach Nash equilibrium (lines 11-12). The iteration is carried out until a Nash equilibrium is reached.

Inspired by learning automata theory [15], we propose the PSOPSSL method and the position update formula is

\[\begin{split} v_{ij}\left(t+1\right)=& wv_{ij}\left(t \right)+c_{1}^{*}r_{1}\left(t\right)\left[p_{ij}\left(t\right)-x_{ij}\left(t \right)\right]\\ & c_{2}^{*}r_{2}\left(t\right)\left[p_{ij}\left(t\right)-x_{ij} \left(t\right)\right],\end{split} \tag{17}\]

where \(c_{1}^{*}\) is updated as \(c_{1}^{*}=c_{1}^{0}+0.1*s_{1}^{*}\), and \(s_{1}^{*}\) is the round whose local extremums are invariant. \(c_{2}^{*}=c_{2}^{0}+0.1*s_{2}^{*}\) and \(s_{2}^{*}\) are the global extremum invariant round. \(w\) represent the weight that keeps initial velocity, which can be expressed as \(w=w-0.1*s_{1}^{*}\). \(\tau\) is the number of iterations of PSOPSSL algorithm. The PSOPSSL adjusts the size of its parameters based on the number of iterations and the frequency of selecting the same extreme value position. It effectively balances both global and local search capabilities of particles.

## V Simulation Result

In this section, we carry out the simulations using MATLAB. The energy consumption data per unit task of UEs is set to \([0.2,0.5]\mathrm{J/MB}\). \(\delta_{i}\) is set as \(40\). For the UAV-MEC, the computing power is set as between [1, 5]\(\times 10^{9}\)cycles/s. The CPU power is a random value between [0.1, 0.5]W. We consider a data unit requires a CPU revolution of 1,900 cycles/byte, i.e., \(\alpha=1,900\) cycles/byte. The amount of data for each task is distributed in the range [10, 50]MB.

Fig. 3 depicts the process of Stackelberg equilibrium. Fig. 3(a) is the utility of UE \(i\) with a fixed UAV controller price \(\lambda_{i}=\lambda_{i}^{*}\). The utility of UE \(i\) reaches the maximum when the unloading policy is \(g_{i}=g_{i}^{*}\). Fig. 3(b) illustrates the income generated when the UAV controller adopts the fixed unloading strategy \(g^{*}=g_{i}^{*}\). The optimal price \(\lambda_{i}=\lambda_{i}^{*}\) corresponds to the point of the maximum profit. This analysis demonstrates that both UEs and UAV controller collaborate to achieve a Nash equilibrium.

