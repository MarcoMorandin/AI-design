# UAV-Assisted MEC for Disaster Response: Stackelberg Game-Based Resource Optimization

Yafei Guo\({}^{1}\), Ziye Jia\({}^{1}\), Lei Zhang\({}^{1}\), Jia He\({}^{1}\), Yu Zhang\({}^{2}\), and Qihui Wu\({}^{1}\)

This work was supported in part by National Natural Science Foundation of China under Grant 26301251, in part by the Natural Science Foundation on Frontier Leading Technology Basic Research Project of Jiangsu under Grant BK20222001, in part by the Aeronautical Science Foundation of China 20232071052007, and in part by the Young Elite Scientists Sponsorship Program by CAST 2023QNRC001.

orridors [11, 12], and provide computing services for UEs in place of the Damaged BS-MEC that has lost communication and computing power. In order to achieve the efficient collaborative operation of UAVs and MEC, the UAV controller deploys UAV-MEC through the precise Remote ID communication technology. In detail, all \(J\) UAVs denoted as \(\mathcal{J}=\{1,2,\ldots,J\}\) are dispatched by the UAV controller. Further, \(I\) UEs are distributed in the disaster area denoted as \(\mathcal{I}=\{1,2,\ldots,I\}\), and the computation task generated by UE \(i\) is represented as a two-tuple, \(T_{i}=\{G_{i},g_{i}\}\). Wherein, \(G_{i}\) and \(g_{i}\) are the size of all data as well as the size of data offloaded to the UAV-MEC, respectively. Let \(\{p_{i},\varepsilon_{i}\}\) denote the local computing power and unit energy consumption of UE \(i\), respectively. The characteristics of UAV \(j\) are described as \(\{f_{j},P_{j}^{\mathrm{comp}}\}\), where \(f_{j}\) represents the total computation resources owned by UAV \(j\), and \(P_{j}^{\mathrm{comp}}\) represents the CPU power of the UAV-MEC server.

The 3D Cartesian coordinates are utilized to represent the positions of UAVs and UEs. The location of UAV \(j\) and UE \(i\) are denoted as \(z_{j}=(x_{j},y_{j},h_{j})\) and \(z_{i}=(x_{i},y_{i},0)\), respectively. Thus, the distance between UAV \(j\) and UE \(i\) is calculated as \(d_{i,j}=\sqrt{\left\|z_{i}-z_{j}\right\|^{2}}\).

### _Communication Model_

Considering that the UAVs are deployed in the 3D corridors with a constant height of \(H\), we assume that the task offloading link between UEs and UAVs can be modeled as a line-of-sight (LoS). The uplink model from UE \(i\) to UAV \(j\) is expressed as:

\[r_{i,j}=B\log_{2}\left(1+\frac{q_{i}h_{i,j}}{\sigma^{2}}\right), \tag{1}\]

where \(B\) is the bandwidth allocated by UE \(i\) to UAV \(j\), \(\sigma^{2}\) represents the noise power and \(q_{i}\) is the transmission power of UE \(i\). The channel gain can be expressed as \(h_{i,j}=d_{i,j}^{-p}\), where \(\rho\) denotes the path loss factor between UEs and UAVs.

### _Utility of UE and UAV Controller_

#### Ii-C1 Utility of UE

The uplink transmission time from UE \(i\) to UAV \(j\) can be calculated as \(t_{i,j}^{\mathrm{trans}}=\frac{q_{i}}{r_{i,j}}\). Then, the uplink transmission energy is \(E_{i,j}^{\mathrm{trans}}=p_{i}t_{i,j}^{\mathrm{trans}}\). The local computation energy consumption of UE \(i\) is \(E_{\mathrm{local}}^{\mathrm{comp}}=\varepsilon_{i}(G_{i}-g_{i})\). Therefore, the utility of UE \(i\) is

\[U_{i}=S(g_{i})\delta_{i}-E_{i,j}^{\mathrm{trans}}-E_{\mathrm{local}}^{\mathrm{ comp}}-\lambda_{i}g_{i}, \tag{2}\]

where \(S(g_{i})=\ln(1+g_{i})\) is the satisfaction function that reflects the satisfaction degree of UE. \(\delta_{i}\) is the control coefficient to assess the impact of UE satisfaction on its utility. \(\lambda_{i}\) represents the price of each unit of data offloaded by the UAV-MEC server for each UE.

#### Ii-C2 Utility of UAV Controller

In face of simultaneous offloading of multiple UEs, the UAV-MEC server adopts an equal allocation strategy of computing power [13]. We assume that there are \(M_{j}\) UEs offloading tasks to the UAV \(j\) simultaneously. The computing time of UAV \(j\) for the offloading data of UE \(i\) can be calculated as \(t_{i,j}^{\mathrm{comp}}=\frac{\alpha g_{i}}{f_{ij}}\), where \(f_{ij}=f_{j}/M_{j}\) represents UE \(i\) obtains the computing resource from UAV \(j\), and \(\alpha\) is a coefficient related to data encoding.

Therefore, the computing energy consumption of UAV-MEC server \(j\) for UE \(i\) is \(E_{i,j}^{\mathrm{comp}}=P_{j}^{\mathrm{comp}}t_{i,j}^{\mathrm{comp}}\). The energy consumption equation of UAV \(j\) is \(E_{i}^{\mathrm{comp}}=\sum_{i=1}^{N}X_{i,j}E_{i,j}^{\mathrm{comp}}\), where variable \(X_{i,j}\in\{0,1\}\) represents the link status between UE \(i\) and UAV \(j\). When \(X_{i,j}=1\), it indicates that UE \(i\) has establishes a connection with UAV \(j\), enabling the allocation of computing resources. Conversely, \(X_{i,j}=0\) means there exists no connection between UE \(i\) and UAV \(j\). The hovering energy consumption is denoted by \(E_{j}^{\mathrm{hov}}=P_{j}^{\mathrm{hov}}/\eta\), where \(P_{j}^{\mathrm{hov}}\) indicates the minimum power for hovering, and \(\eta\) represents the power efficiency [14]. Therefore, the utility of the UAV controller can be calculated as

\[U_{con}=\sum_{i=1}^{N}\lambda_{i}g_{i}-\sum_{j=1}^{J}E_{j}^{\mathrm{comp}}- \sum_{j=1}^{J}E_{j}^{\mathrm{hov}}. \tag{3}\]

### _Problem Formulation_

The optimization goal is to maximize the utility of both the UAV controller and UEs. The optimization problem for UE \(i\) is

\[\mathbf{P0}\text{:}\underset{g_{i},\lambda_{i},X_{i,j}}{\text{ max}}\quad U_{i},\] \[\text{s.t.}\sum_{j\in\mathcal{J}}X_{i,j}\leq 1,\forall i\in\mathcal{N}, \tag{4}\] \[g_{i}\in[0,G_{i}],\forall g_{i}\in\mathbf{g},\] (5) \[\lambda_{i}\in[\lambda_{i}^{min},\lambda_{i}^{max}],\forall \lambda_{i}\in\mathbf{\lambda},\] (6) \[X_{i,j}\in\{0,1\},\forall i\in\mathcal{N},\forall j\in\mathcal{ J}, \tag{7}\]

where constraint (4) denotes that UE \(i\) can only select one UAV from set \(\mathcal{J}\) to offload tasks. Constraint (5) indicates that the data amount of tasks offloaded by UE \(i\) is no more than the data amount of the entire task \(T_{i}\). Constraint (6) indicates the resource price range of the UAV controller, where \(\lambda_{i}^{min}\) and \(\lambda_{i}^{max}\) are the minimum and maximum prices, respectively. Constraint (7) indicates that UE \(i\) has the option to decide whether or not to offload the task to UAV \(j\).

Fig. 1: Multiple UAV-MECs assisted task offloading network.

 The optimization problem for the UAV controller is:

\[\mathbf{P1}\mathbf{:}\underset{\mathbf{g},\mathbf{\lambda},X_{i,j}}{\text{ max}}\quad U_{con}, \tag{8}\] \[\text{s.t.}\quad E_{j}^{\mathrm{comp}}+E_{j}^{\mathrm{hov}}\leq \varepsilon,\forall j\in\mathcal{J},\] \[(5),(6),\]

where constraint (8) indicates that the energy consumption can not exceed the UAV battery budget.

## III Game Theory Based Problem Analysis

### _Stackelberg Game Model_

Since the UAV controller has a competitive relationship with UEs, the interaction between UEs and the UAV controller is modeled as a Stackelberg game with a single leader and multiple followers, as depicted in Fig. 2. The game is described in two stages. In the first stage, each UE submits the task information and the UAV controller sets the resource prices \(\mathbf{\lambda}=\{\lambda_{1},\lambda_{2},\ldots,\lambda_{I}\}\) based on the information provided by the UEs. In the second stage, each UE determines the data offloading strategy \(\mathbf{g}=\{g_{1},g_{2},\ldots,g_{I}\}\), according to the specified pricing scheme.

### _Optimization of UE_

We apply a backward induction method to deal with the game-theoretic problem. The proof of the existence and uniqueness of Nash equilibrium is given as follows.

**Definition 1**.: _There exists Nash equilibrium among EUs with \(\mathbf{g}^{*}=\{g_{1}^{*},g_{2}^{*},...,g_{N}^{*}\}\). At this point, there is a utility function \(U_{i}\left(g_{i}^{*},g_{-i}^{*}\right)>U_{i}\left(g_{i},g_{-i}^{*}\right)\), where \(g_{-i}^{*}\) is the best strategy for other UEs excluding EU \(i\)._

**Theorem 1**.: _In the Stackelberg game, there exists a unique Nash equilibrium point when the utility function of UE \(i\) adheres to Eq. (2). In this case, the optimal offloading strategy of UE \(i\) is denoted by_

\[g_{i}^{*}=\frac{\delta_{i}}{\frac{p_{i}}{r_{i,j}}-\varepsilon_{i}+\lambda_{i}}-1. \tag{9}\]

**Proof**.: _The first and second partial derivatives of the utility function \(U_{i}\) with respect to \(g_{i}\) can be obtained as follows_

\[\frac{\partial U_{i}}{\partial g_{i}}=\frac{\delta_{i}}{1+g_{i}}-\frac{p_{i}}{ r_{i,j}}+\varepsilon_{i}-\lambda_{i}, \tag{10}\]

_and_

\[\frac{\partial U_{i}^{2}}{\partial g_{i}^{2}}=-\frac{\delta_{i}}{\left(1+g_{i }\right)^{2}}. \tag{11}\]

_Since \(\delta_{i}>0\) and \(1+g_{i}>0\), we can obtain that the second derivative is less than zero. The utility function \(U_{i}(g_{i})\) of UE \(i\) is strictly concave. Therefore, the Nash equilibrium solution exists. When \(\partial U_{i}/\partial g_{i}=0\), we obtain the optimal data offloading strategy for UE. _

Since \(g_{i}\in[0,G_{i}]\), we can obtain the threshold for the pricing strategy of the UAV controller as: \(\lambda_{i}^{min}=\frac{\delta_{i}}{(1+G_{i})}-\frac{p_{i}}{r_{i,j}}+ \varepsilon_{i}\), and \(\lambda_{i}^{min}=\delta_{i}+\varepsilon_{i}-\frac{p_{i}}{r_{i,j}}\). Therefore, the primal offloading strategy of UE \(i\) can be expressed as:

\[g_{i}^{*}=\begin{cases}G_{i},&\lambda_{i}\leq\lambda_{i}^{min},\\ \frac{\delta_{i}}{\frac{p_{i}}{r_{i,j}}-\varepsilon_{i}+\lambda_{i}}-1,&\lambda _{i}^{min}<\lambda_{i}<\lambda_{i}^{max},\\ 0,&\lambda_{i}\geq\lambda_{i}^{max}.\end{cases} \tag{12}\]

### _Optimization of the UAV Controller Server_

**Definition 2**.: _If \(U_{con}(\lambda_{i}^{*},g_{i}^{*})>U^{edge}(\lambda_{i},g_{i}^{*})\), a unique Stackelberg equilibrium is proposed between UEs and the UAV controller._

**Theorem 2**.: _In the Stackelberg game, there exists a unique Nash equilibrium point when the utility function of UAV controller adheres to Eq. (3). Similarly, the pricing strategy optimal for the UAV is calculated by_

\[\lambda_{i}^{*}=\frac{\sqrt{r_{i,j}\delta_{i}(p_{i}-r_{i,j} \varepsilon_{i}+r_{i,j}\frac{\alpha\cdot M_{j}P_{j}^{ramp}}{f_{j}}X_{i,j})}-p_{ i}+r_{i,j}\varepsilon_{i}}{r_{i,j}}. \tag{13}\]

**Proof**.: _By putting \(g_{i}^{*}\) into \(U_{con}\), we can obtain \(U_{con}(\lambda_{i},g_{i}^{*})\) as_

\[\begin{split}& U_{con}(\lambda_{i},g_{i}^{*})=\sum_{i=1}^{N} \lambda_{i}(\frac{\delta_{i}r_{i,j}}{p_{i}-\varepsilon_{i}r_{i,j}+\lambda_{i} r_{i,j}}-1)\\ &-\sum_{j=1}^{J}\sum_{i=1}^{N}\frac{\alpha\cdot M_{j}}{f_{j}}( \frac{\delta_{i}r_{i,j}}{p_{i}-\varepsilon_{i}r_{i,j}+\lambda_{c}r_{i,j}}-1)X_ {i,j}.\end{split} \tag{14}\]

_The first and second partial derivatives of the utility function \(U_{con}\) with respect to \(\lambda_{i}\) can be obtained as_

\[\frac{\partial U_{con}}{\partial\lambda_{i}}=\frac{r_{i,j}\delta_{i}(p_{i}-r_{ i,j}\varepsilon_{i}+r_{i,j}\frac{\alpha\cdot M_{j}P_{j}^{comp}}{f_{j}}X_{i,j})}{(p_{i}-r_{ i,j}\varepsilon_{i}+r_{i,j}\lambda_{i})^{2}}-1, \tag{15}\]

_and_

\[\frac{\partial U_{con}^{2}}{\partial\lambda_{i}^{2}}=-\frac{2r_{i,j}^{2} \delta_{i}(p_{i}-r_{i,j}\varepsilon_{i}+r_{i,j}\frac{\alpha\cdot M_{j}P_{j}^{ comp}}{f_{j}}X_{i,j})}{(p_{i}-r_{i,j}\varepsilon_{i}+r_{i,j}\lambda_{i})^{3}}. \tag{16}\]

_Since \(g_{i}^{*}\) is no less than 0, we can obtain \(\frac{p_{i}}{r_{i,j}}-\varepsilon_{i}+\lambda_{i}>0\). Therefore the second derivative is less than zero. When \(\partial U_{con}/\partial\lambda_{i}=0\), we obtain the optimal pricing strategy. _

Fig. 2: The Stackelberg game procedure.

```
0:\(\{z_{1},z_{2}\cdots,z_{I}\}\), \(\mathbf{g}\), and \(J\).
0:\(\{C_{1}\cdots C_{J}\}\), \(\{z_{1},z_{2},\cdots z_{J}\}\), and \(X_{i,j}\).
1:Initialize set cluster number \(\{C_{1}\cdots C_{J}\}\), the maximum iterations \(N\), and maximum UAV load \(D_{j}\).
2:Select \(J\) random samples from \(\{z_{1},z_{2}\cdots,z_{I}\}\) as the initial centroid \((\mu_{1}\cdots\mu_{J})\).
3:for\(i=1\) to \(N\)do
4:for\(j=1\) to \(J\)do
5: Calculate the initial distance \(d_{i}^{*}\).
6: Allocate \(z_{i}\) to \(C_{j}\) with minimum \(d_{i}^{j}\).
7: Update \(\mu\) according to \(\mu_{1}\).
8:endfor
9:if\(\mu_{j(n)}=\mu_{j(n-1)}\)then
10: End loop.
11:endif
12:endfor
13:while\(\sum_{i\in C_{j}}g_{i}>D_{j}\)do
14: Removal \(z_{i}\) with \(max(d_{i}^{j})\) from \(C_{j}\).
15: Add \(z_{i}\) to \(C_{i}\neq C_{j}\) with minimum \(d_{i}^{j}\).
16:endwhile
```

**Algorithm 1** ULAR Mechanism

## IV Algorithm Design

In this section, we design a low computing cost mechanism ULAR to find the best location of UAV-MEC, and adjust the unloading destination of UEs according to the maximum data capacity of UAV-MEC. Then, in order to achieve the Nash equilibrium efficiently, we propose the CPPO algorithm.

### _UAV Localization and Availability Response Mechanism_

In order to deploy UAVs and allocate computing resources of UAVs more efficiently, we design the ULAR mechanism, as shown in algorithm 1. We adopt the K-means clustering based to select the optimal deployment positions of UAVs. From steps 1 to 12, the UEs are clustered according to the distance and the updated clusters are obtained. Further, when the amount of offloading data exceeds the maximum load of UAV \(j\), the farthest UE in the cluster assigned to the next nearest cluster from steps 13 to 16. In general, with the Algorithm 1, more UEs can be served in the limited resources of UAVs.

### _Chess-like PSOPSSL Optimization Algorithm_

We propose the CPPO to obtain the Nash equilibrium in Algorithm 2. The particle swarm optimization probability based strategy selection learning optimization (PSOPSSL) method is used to optimize the pricing strategy and offloading strategy to find the optimal solution (lines 2-5). We use the ULAR mechanism to simulate a scenario similar to the two-player game in chess, with the obtained solution to avoid the situation that the UAV is not available after optimization (lines 7-10). The utility of both sides is calculated to reach Nash equilibrium (lines 11-12). The iteration is carried out until a Nash equilibrium is reached.

Inspired by learning automata theory [15], we propose the PSOPSSL method and the position update formula is

\[\begin{split} v_{ij}\left(t+1\right)=& wv_{ij}\left(t \right)+c_{1}^{*}r_{1}\left(t\right)\left[p_{ij}\left(t\right)-x_{ij}\left(t \right)\right]\\ & c_{2}^{*}r_{2}\left(t\right)\left[p_{ij}\left(t\right)-x_{ij} \left(t\right)\right],\end{split} \tag{17}\]

where \(c_{1}^{*}\) is updated as \(c_{1}^{*}=c_{1}^{0}+0.1*s_{1}^{*}\), and \(s_{1}^{*}\) is the round whose local extremums are invariant. \(c_{2}^{*}=c_{2}^{0}+0.1*s_{2}^{*}\) and \(s_{2}^{*}\) are the global extremum invariant round. \(w\) represent the weight that keeps initial velocity, which can be expressed as \(w=w-0.1*s_{1}^{*}\). \(\tau\) is the number of iterations of PSOPSSL algorithm. The PSOPSSL adjusts the size of its parameters based on the number of iterations and the frequency of selecting the same extreme value position. It effectively balances both global and local search capabilities of particles.

## V Simulation Result

In this section, we carry out the simulations using MATLAB. The energy consumption data per unit task of UEs is set to \([0.2,0.5]\mathrm{J/MB}\). \(\delta_{i}\) is set as \(40\). For the UAV-MEC, the computing power is set as between [1, 5]\(\times 10^{9}\)cycles/s. The CPU power is a random value between [0.1, 0.5]W. We consider a data unit requires a CPU revolution of 1,900 cycles/byte, i.e., \(\alpha=1,900\) cycles/byte. The amount of data for each task is distributed in the range [10, 50]MB.

Fig. 3 depicts the process of Stackelberg equilibrium. Fig. 3(a) is the utility of UE \(i\) with a fixed UAV controller price \(\lambda_{i}=\lambda_{i}^{*}\). The utility of UE \(i\) reaches the maximum when the unloading policy is \(g_{i}=g_{i}^{*}\). Fig. 3(b) illustrates the income generated when the UAV controller adopts the fixed unloading strategy \(g^{*}=g_{i}^{*}\). The optimal price \(\lambda_{i}=\lambda_{i}^{*}\) corresponds to the point of the maximum profit. This analysis demonstrates that both UEs and UAV controller collaborate to achieve a Nash equilibrium.

Fig. 4 illustrates the iterative process of the proposed PSOPSSL. Fig. 4(a) shows the iterative convergence process for the UE. As iterations increases, the utility progressively improves, reaching the stable convergence after 10 iterations. Similarly, as shown in Fig. 4(b), the convergence is achieved after approximately 10 iterations as the number of iterations increases. It is noted that PSOPSSL converges faster than particle swarm optimization (PSO) and gradient descent (GD).

To assess the performance of the proposed CPPO method, we compare it with three alternative scenarios: 1) the CCPO algorithm without the ULAR mechanism (NU-CPPO), 2) uploading strategies determined via game theory (OSRS), and 3) pricing strategies determined via game theory (PSRS). In detail, Fig. 5(a) and 5(b) compare the mean utility of UEs for all users and the utilize of the UAV controller under four different offloading strategies, respectively. The CPPO scheme significantly improves the utility of UEs and the UAV controller compared to the OSRS and PSRS. Compared to the NU-CPPO strategy, the results of the comparison highlight the necessity of implementing the ULAR mechanism.

## VI Conclusions

This paper presents a novel framework in which a ground-based UAV controller coordinates the deployment of UAV-MECs within 3D corridors and efficiently allocates computational resources to support damaged UEs in disaster areas. Considering that there is a competitive relationship between the UAV controller and UEs, it is modeled as a Stackelberg game problem. We design a ULAR mechanism to optimize UAV placement and resource allocation. To deal with the formulated Stackelberg game problem, we propose a CPPO algorithm. Extensive simulations are conducted to assess the performance of the proposed methods, with results showing that the proposed algorithms outperform other baseline approaches.

## References

* IEEE International Conference on Communications_, Rome, Italy, Oct. 2023.
* [2] Z. Ning, Y. Yang, X. Wang, L. Guo, X. Gao, S. Guo, and G. Wang, "Dynamic Computation Offloading and Server Deployment for UAV-Enabled Multi-Access Edge Computing," _IEEE Trans. Mob. Comput._, vol. 22, no. 5, pp. 2628-2644, Nov. 2023.
* [3] Z. Jia, Y. Cao, L. He, Q. Wu, Q. Zhu, D. Niyato, and Z. Han, "Service Function Chain Dynamic Scheduling in Space-Air-Ground Integrated Networks," _IEEE Trans. Veh. Technol._, pp. 1-15, Feb. 2025.
* [4] Y. He, K. Xiang, X. Cao, and M. Guizani, "Task Scheduling and Trajectory Optimization Based on Fairness and Communication Security for Multi-UAV-MEC System," _IEEE Internet Things J._, vol. 11, no. 19, pp. 30 510-30 523, Jun. 2024.
* [5] S. Karimi-Bidhendi, G. Geraci, and H. Jafarkhani, "Optimizing Cellular Networks for UAV Corridors via Quantization Theory," _IEEE Trans. Wireless Commun._, vol. 23, no. 10, pp. 14 924-14 939, Jul. 2024.
* [6] N. Ruseno, C.-Y. Lin, and S.-C. Chang, "UAS Traffic Management Communications: The Legacy of ADS-B, New Establishment of Remote ID, or Leverage of ADS-B-Like Systems?" _Drones_, vol. 6, no. 3, p. 57, Feb. 2022.
* [7] Z. Jia, J. You, C. Dong, Q. Wu, F. Zhou, D. Niyato, and Z. Han, "Cooperative Cognitive Dynamic System in UAV Swarms: Reconfigurable Mechanism and Framework," _IEEE Veh. Technol. Mag._, vol. 19, no. 3, pp. 90-101, Jul. 2024.
* [8] T. Fang, F. Yuan, L. Ao, and J. Chen, "Joint Task Offloading, D2D Pairing, and Resource Allocation in Device-Enhanced MEC: A Potential Game Approach," _IEEE Internet Things J._, vol. 9, no. 5, pp. 3226-3237, Jul. 2021.
* [9] L. Geng, H. Zhao, and C. Zou, "Stackelberg Game-Based Computation Offloading and Pricing in UAV Assisted Vehicular Networks," _IEEE Trans. Reliab._, pp. 1-15, May 2024.
* [10] Y. Zhang, X. Hou, H. Du, L. Zhang, J. Du, and W. Men, "Joint Trajectory and Resource Optimization for UAV and D2D-Enabled Heterogeneous Edge Computing Networks," _IEEE Trans. Veh. Technol._, vol. 73, no. 9, pp. 13 816-13 827, May 2024.
* [11] N. Cherif, W. Jafari, H. Yanikomeroglu, and A. Yongacoglu, "3D Aerial Highway: The Key Enabler of the Retail Industry Transformation," _IEEE Commun. Mag._, vol. 59, no. 9, pp. 65-71, Oct. 2021.
* [12] D. Chao, Y. Zhang, J. Zijye, L. Yiyang, L. Zhang, and W. Qihui, "Three-dimension Collision-free Trajectory Planning of UAVs Based on ADS-B Information in Low-altitude Urban Airspace," _Chin. J. Aeronaut._, vol. 38, no. 2, p. 103170, Aug. 2024.
* [13] M. Wang, L. Zhang, P. Gao, X. Yang, K. Wang, and K. Yang, "Stackelberg-Game-Based Intelligent Offloading Incentive Mechanism for a Multi-UAV-Assisted Mobile-Edge Computing System," _IEEE Internet Things J._, vol. 10, no. 17, pp. 15 679-15 689, Apr. 2023.
* [14] K. Zhang, X. Gui, D. Ren, and D. Li, "Energy-Latency Tradeoff for Computation Offloading in UAV-Assisted Multiaccess Edge Computing System," _IEEE Internet Things J._, vol. 8, no. 8, pp. 6709-6719, Jun. 2021.
* [15] K. Najim and A. S. Poznyak, _Learning Automata: Theory and Applications_. Elsevier, 2014.

Fig. 4: Iterations of PSOPSSL algorithm.

Fig. 5: Comparison of different algorithms.

Fig. 3: The Stackelberg equilibrium.